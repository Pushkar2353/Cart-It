import React, { useState, useEffect } from "react";
import axios from "axios";
import "bootstrap/dist/css/bootstrap.min.css";
import { FaStar, FaRegStar } from "react-icons/fa";
import { useNavigate } from "react-router-dom";


const Review = () => {
  const [products, setProducts] = useState([]);
  const [selectedProduct, setSelectedProduct] = useState(null);
  const [rating, setRating] = useState(5);
  const [reviewText, setReviewText] = useState("");
  const [reviewDate] = useState(new Date().toISOString());
  const [errorMessage, setErrorMessage] = useState("");
  const [successMessage, setSuccessMessage] = useState("");
    const navigate = useNavigate();
  

  // Get customerId from local storage
  const customerId = localStorage.getItem("customerId");

  // Fetch all products
  useEffect(() => {
    axios
      .get("https://localhost:7256/api/Product")
      .then((response) => {
        setProducts(response.data);
      })
      .catch((error) => {
        setErrorMessage("Failed to load products.");
        console.error("Error fetching products:", error);
      });
  }, []);

  // Handle Add Review button click
  const handleAddReview = (product) => {
    setSelectedProduct(product);
    setErrorMessage("");
    setSuccessMessage("");
  };

  // Handle Rating Selection
  const handleRating = (rate) => {
    setRating(rate);
  };

  // Handle Review Submission
  const handleSubmit = async () => {
    if (!reviewText.trim()) {
      setErrorMessage("Review text cannot be empty.");
      return;
    }

    const reviewData = {
      reviewId: 0, // Auto-generated by backend
      customerId: parseInt(customerId),
      productId: selectedProduct?.productId,
      rating,
      reviewText,
      reviewDate,
    };

    try {
      const response = await axios.post("https://localhost:7256/api/review", reviewData, {
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.status === 201) {
        setSuccessMessage("Review submitted successfully.");
        setErrorMessage("");
        setSelectedProduct(null); // Return to product catalog
      }
    } catch (error) {
      setErrorMessage("An error occurred while submitting your review.");
      console.error("Review submission error:", error);
    }
  };

  return (
    <div className="container py-5">
      <header className="text-center mb-4">
        <h1>{selectedProduct ? `Review ${selectedProduct.productName}` : "Product Catalog"}</h1>
      </header>

      {/* Error or Success Messages */}
      {errorMessage && <p className="text-danger">{errorMessage}</p>}
      {successMessage && <p className="text-success">{successMessage}</p>}

      {/* Product Catalog */}
      {!selectedProduct && (
        <div className="row">
          {products.map((product) => (
            <div className="col-md-4 mb-4" key={product.productId}>
              <div className="card h-100">
                <img
                  src={product.productImageUrl || "https://via.placeholder.com/200"}
                  alt={product.productName}
                  className="card-img-top"
                  style={{ maxHeight: "200px", objectFit: "cover" }}
                  onError={(e) => (e.target.src = "https://via.placeholder.com/200")}
                />
                <div className="card-body">
                  <h5 className="card-title">{product.productName}</h5>
                  <p className="card-text">{product.productDescription}</p>
                  <button
                    className="btn btn-primary"
                    onClick={() => handleAddReview(product)}
                  >
                    Add Review
                  </button>
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      {/* Review Form */}
      {selectedProduct && (
        <div>
          <div className="product-details mb-4">
            <h2>{selectedProduct.productName}</h2>
            <img
              src={selectedProduct.productImageUrl || "https://via.placeholder.com/300"}
              alt={selectedProduct.productName}
              className="img-fluid"
              style={{ maxWidth: "300px", objectFit: "cover" }}
              onError={(e) => (e.target.src = "https://via.placeholder.com/300")}
            />
            <p>{selectedProduct.productDescription}</p>
          </div>

          <div className="review-form">
            <h4>Rating</h4>
            <div className="rating-stars mb-3">
              {[...Array(5)].map((_, index) => (
                <span
                  key={index}
                  onClick={() => handleRating(index + 1)}
                  style={{ cursor: "pointer" }}
                >
                  {index < rating ? (
                    <FaStar size={30} color="gold" />
                  ) : (
                    <FaRegStar size={30} />
                  )}
                </span>
              ))}
            </div>

            <div className="form-group mb-3">
              <label htmlFor="reviewText">Review Text</label>
              <textarea
                id="reviewText"
                className="form-control"
                rows="4"
                value={reviewText}
                onChange={(e) => setReviewText(e.target.value)}
                placeholder="Write your review here"
              ></textarea>
            </div>

            <button className="btn btn-primary mt-3 me-2" onClick={handleSubmit}>
              Submit Review
            </button>
            <button
              className="btn btn-secondary mt-3"
              onClick={() => setSelectedProduct(null)}
            >
              Back to Catalog
            </button>

          </div>
          </div>
      )}

      {/* Button to go back to Home Page */}
      <button className="btn btn-primary mt-4" onClick={() => navigate("/")}>
        Go to Home Page
      </button>
    </div>
  );
};

export default Review;





